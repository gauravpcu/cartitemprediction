AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Enhanced Order Prediction Solution with AWS-provided layers

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]
  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
  SageMakerEndpointName:
    Type: String
    Default: hybrent-deepar-2025-07-20-23-56-22-287
  EnableProductLevelForecasting:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']

Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        BEDROCK_MODEL_ID: !Ref BedrockModelId
        SAGEMAKER_ENDPOINT_NAME: !Ref SageMakerEndpointName
        ENABLE_PRODUCT_FORECASTING: !Ref EnableProductLevelForecasting

Resources:
  # Use AWS-provided layers instead of custom ones
  DataValidation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/data_validation/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:1
      Environment:
        Variables:
          RAW_BUCKET: !Ref RawDataBucket
          PROCESSED_BUCKET: !Ref ProcessedDataBucket

  FeatureEngineering:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/enhanced_feature_engineering/
      Handler: app.lambda_handler
      Timeout: 900
      MemorySize: 2048
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:1
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSDataWrangler-Python39:1
      Environment:
        Variables:
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          PRODUCT_LOOKUP_TABLE: !Ref ProductLookupTable

  Predictions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/enhanced_predictions/
      Handler: app.lambda_handler
      Timeout: 900
      MemorySize: 2048
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:1
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSDataWrangler-Python39:1
      Environment:
        Variables:
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          PREDICTION_CACHE_TABLE: !Ref PredictionCacheTable

  # Keep the working API functions as they are
  PredictionAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/prediction_api/
      Handler: app.lambda_handler
      Events:
        PredictApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderPredictionApi
            Path: /predict
            Method: get

  ProductPredictionAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/product_prediction_api/
      Handler: app.lambda_handler
      Events:
        ProductPredictApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderPredictionApi
            Path: /predict/products
            Method: get

  RecommendAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/recommend_api/
      Handler: app.lambda_handler
      Events:
        RecommendApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderPredictionApi
            Path: /recommend
            Method: get

  FeedbackAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/feedback_api/
      Handler: app.lambda_handler
      Events:
        FeedbackApi:
          Type: Api
          Properties:
            RestApiId: !Ref OrderPredictionApi
            Path: /feedback
            Method: post

  # Keep all the existing resources (S3, DynamoDB, API Gateway, etc.)
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'item-prediction-rawdatabucket-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'item-prediction-processeddatabucket-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ProductLookupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'OrderPredictionProductLookup-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH

  PredictionCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'OrderPredictionCache-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: cache_key
          AttributeType: S
      KeySchema:
        - AttributeName: cache_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  OrderPredictionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${OrderPredictionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  
  ProductPredictionEndpoint:
    Description: Product-level prediction endpoint
    Value: !Sub 'https://${OrderPredictionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/predict/products'
  
  RawDataBucketName:
    Description: S3 bucket for raw data
    Value: !Ref RawDataBucket
  
  ProcessedDataBucketName:
    Description: S3 bucket for processed data
    Value: !Ref ProcessedDataBucket
  
  ProductLookupTableName:
    Description: DynamoDB table for product lookup
    Value: !Ref ProductLookupTable
  
  PredictionCacheTableName:
    Description: DynamoDB table for prediction caching
    Value: !Ref PredictionCacheTable
