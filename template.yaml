AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Enhanced Order Prediction POC with Product-Level Forecasting using Amazon SageMaker Canvas and Bedrock

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Amazon Bedrock model ID to use

  SageMakerEndpointName:
    Type: String
    Description: The name of the SageMaker endpoint to use for predictions.

  EnableProductLevelForecasting:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable product-level forecasting (recommended)

Globals:
  Function:
    Timeout: 120  # Increased timeout for product-level processing
    MemorySize: 1024  # Increased memory for larger datasets
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        LOG_LEVEL: INFO
        ENVIRONMENT: !Ref Environment
        ENABLE_PRODUCT_FORECASTING: !Ref EnableProductLevelForecasting
        # DeepAR Configuration (from notebook)
        PREDICTION_LENGTH: '14'
        CONTEXT_LENGTH: '28'
        # Bedrock Configuration (from notebook)
        BEDROCK_MODEL_ID: !Ref BedrockModelId
        BEDROCK_MAX_TOKENS: '2000'
        BEDROCK_TEMPERATURE: '0.2'
        BEDROCK_ANTHROPIC_VERSION: 'bedrock-2023-05-31'
        # Holiday Detection Configuration
        ENABLE_DYNAMIC_HOLIDAYS: 'true'
        DEFAULT_REGION: !Ref AWS::Region

Resources:
  # S3 Buckets
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub item-prediction-raw-data-${Environment}-${AWS::AccountId}-v2
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldRawData
            Status: Enabled
            ExpirationInDays: 90

  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub item-prediction-processed-data-${Environment}-${AWS::AccountId}-v2
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldProcessedData
            Status: Enabled
            ExpirationInDays: 180

  ModelArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub item-prediction-model-artifacts-${Environment}-${AWS::AccountId}-v2
      VersioningConfiguration:
        Status: Enabled

  ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub item-prediction-results-${Environment}-${AWS::AccountId}-v2
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Tables
  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub item-prediction-feedback-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # New: Product Lookup Table for enhanced product-level forecasting
  ProductLookupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub item-prediction-product-lookup-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
        - AttributeName: customer_facility
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CustomerFacilityIndex
          KeySchema:
            - AttributeName: customer_facility
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # New: Prediction Cache Table for improved performance
  PredictionCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub item-prediction-cache-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: cache_key
          AttributeType: S
      KeySchema:
        - AttributeName: cache_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:ListFoundationModels
                Resource: '*'
        - PolicyName: SageMakerInvokeEndpoint
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                  - sagemaker:InvokeEndpointAsync
                Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${SageMakerEndpointName}'
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:DeleteParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/item-prediction/*'

  # API Gateway
  ItemPredictionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  # Lambda Functions
  # Using AWS-managed layers for better compatibility and performance

  FeatureEngineering:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "feature-engineering-${Environment}-v2"
      CodeUri: functions/enhanced_feature_engineering/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900  # 15 minutes for processing large datasets
      MemorySize: 3008  # Maximum Lambda memory for better performance
      Runtime: python3.9
      Environment:
        Variables:
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          PRODUCT_LOOKUP_TABLE: !Ref ProductLookupTable
          ENABLE_PRODUCT_FORECASTING: !Ref EnableProductLevelForecasting
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref RawDataBucket
            Events: s3:ObjectCreated:*

  DataValidation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "data-validation-${Environment}-v2"
      CodeUri: functions/data_validation/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          PROCESSED_BUCKET: !Ref ProcessedDataBucket

  Predictions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "predictions-${Environment}-v2"
      CodeUri: functions/enhanced_predictions/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 180  # 3 minutes for complex predictions
      MemorySize: 1024  # Reduced to avoid issues
      Runtime: python3.9
      Environment:
        Variables:
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          FEEDBACK_TABLE: !Ref FeedbackTable
          PRODUCT_LOOKUP_TABLE: !Ref ProductLookupTable
          PREDICTION_CACHE_TABLE: !Ref PredictionCacheTable
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          SAGEMAKER_ENDPOINT_NAME: !Ref SageMakerEndpointName

  PredictionAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "prediction-api-${Environment}-v2"
      Description: API function for handling order predictions.
      CodeUri: functions/prediction_api/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          ENHANCE_FUNCTION_NAME: !Ref Predictions
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ItemPredictionApi
            Path: /predict
            Method: get

  # New: Product-Level Prediction API
  ProductPredictionAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "product-prediction-api-${Environment}-v2"
      CodeUri: functions/product_prediction_api/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          ENHANCE_FUNCTION_NAME: !Ref Predictions
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ItemPredictionApi
            Path: /predict/products
            Method: get

  RecommendAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "recommend-api-${Environment}-v2"
      CodeUri: functions/recommend_api/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          ENHANCE_FUNCTION_NAME: !Ref Predictions
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ItemPredictionApi
            Path: /recommend
            Method: get

  FeedbackAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "feedback-api-${Environment}-v2"
      CodeUri: functions/feedback_api/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          FEEDBACK_TABLE: !Ref FeedbackTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ItemPredictionApi
            Path: /feedback
            Method: post

  # CloudWatch Alarms for monitoring
  FeatureEngineeringErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Feature Engineering Function Errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FeatureEngineering

  PredictionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Prediction Function Errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref Predictions

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ItemPredictionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint
  
  ProductPredictionEndpoint:
    Description: Product-level prediction endpoint
    Value: !Sub https://${ItemPredictionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/predict/products
    Export:
      Name: !Sub ${AWS::StackName}-ProductPredictionEndpoint
  
  RawDataBucketName:
    Description: S3 bucket for raw data
    Value: !Ref RawDataBucket
    Export:
      Name: !Sub ${AWS::StackName}-RawDataBucket
  
  ProcessedDataBucketName:
    Description: S3 bucket for processed data
    Value: !Ref ProcessedDataBucket
    Export:
      Name: !Sub ${AWS::StackName}-ProcessedDataBucket

  ProductLookupTableName:
    Description: DynamoDB table for product lookup
    Value: !Ref ProductLookupTable
    Export:
      Name: !Sub ${AWS::StackName}-ProductLookupTable

  PredictionCacheTableName:
    Description: DynamoDB table for prediction caching
    Value: !Ref PredictionCacheTable
    Export:
      Name: !Sub ${AWS::StackName}-PredictionCacheTable
